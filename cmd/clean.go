package cmd

import (
	"fmt"
	"io/fs"
	"os"
	"path/filepath"

	"github.com/fatih/color"
	"github.com/qobs-build/qobs/internal/msg"
	"github.com/spf13/cobra"
)

func dirSize(path string) (int64, error) {
	var total int64 = 0
	err := filepath.Walk(path, func(p string, info fs.FileInfo, err error) error {
		if err != nil {
			return nil
		}
		if !info.IsDir() {
			total += info.Size()
		}
		return nil
	})
	if err != nil {
		return 0, err
	}
	return total, nil
}

func humanSize(bytes int64) string {
	if bytes < 1024 {
		return fmt.Sprintf("%d B", bytes)
	}

	const unit = 1024
	sizes := []string{"B", "KB", "MB", "GB", "TB", "PB", "EB"}

	i := 0
	value := float64(bytes)
	for value >= unit && i < len(sizes)-1 {
		value /= unit
		i++
	}

	return fmt.Sprintf("%.2f %s", value, sizes[i])
}

func dirExists(path string) bool {
	stat, err := os.Stat(path)
	return err == nil && stat.IsDir()
}

func cleanDir(path string) {
	buildDir := filepath.Join(path, "build")
	if dirExists(filepath.Join(buildDir, "QobsFiles")) || dirExists(filepath.Join(buildDir, "_deps")) {
		sz, _ := dirSize(buildDir)
		if err := os.RemoveAll(buildDir); err != nil {
			msg.Warn("failed to remove %s: %v", buildDir, err)
		} else {
			fmt.Printf("%s %s of build artifacts\n", color.HiGreenString("Removed"), humanSize(sz))
		}
	} else {
		msg.Info("couldn't find build directory; nothing to clean")
	}
}

var cleanCmd = &cobra.Command{
	Use:   "clean [path]",
	Short: "Remove artifacts previously generated by Qobs",
	Long:  `Removes the build folder previously generated by Qobs. If no target path is given, uses "."`,
	Args:  cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		path := "."
		if len(args) != 0 {
			path = args[0]
		}
		cleanDir(path)
	},
}

func init() {
	// qobs clean subcommand
	rootCmd.AddCommand(cleanCmd)
}
